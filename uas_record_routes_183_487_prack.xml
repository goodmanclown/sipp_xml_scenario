<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- This program is free software; you can redistribute it and/or      -->
<!-- modify it under the terms of the GNU General Public License as     -->
<!-- published by the Free Software Foundation; either version 2 of the -->
<!-- License, or (at your option) any later version.                    -->
<!--                                                                    -->
<!-- This program is distributed in the hope that it will be useful,    -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
<!-- GNU General Public License for more details.                       -->
<!--                                                                    -->
<!-- You should have received a copy of the GNU General Public License  -->
<!-- along with this program; if not, write to the                      -->
<!-- Free Software Foundation, Inc.,                                    -->
<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->
<!--                                                                    -->
<!--                 Sipp default 'uas' scenario.                       -->
<!--                                                                    -->

<scenario name="Basic UAS responder">
  <!-- By adding rrs="true" (Record Route Sets), the route sets         -->
  <!-- are saved and used for following messages sent. Useful to test   -->
  <!-- against stateful SIP proxies/B2BUAs.                             -->
  <!-- search and save the value of CSeq: to variable 2                 -->
  <!-- search and save the value of host and port of Via: to variable   -->
  <!-- viahost and viaport                                              -->
  <!-- remember to assign variable 1 to any value to avoid error        -->

  <recv request="INVITE" crlf="true" rrs="true">
        <action>
            <ereg regexp=".*" search_in="hdr" header="CSeq:" case_indep="true" assign_to="2,1"/>
            <assign assign_to="1" variable="2"/>
            <ereg regexp="SIP/2.0/UDP ([0-9A-Za-z\.]+):([0-9]+).+" search_in="hdr" header="Via" case_indep="true" assign_to="dummy,viahost,viaport"/>
            <assign assign_to="dummy" variable="viahost"/>
        </action>
  </recv>

  <!-- The '[last_*]' keyword is replaced automatically by the          -->
  <!-- specified header if it was present in the last message received  -->
  <!-- (except if it was a retransmission). If the header was not       -->
  <!-- present or if no message has been received, the '[last_*]'       -->
  <!-- keyword is discarded, and all bytes until the end of the line    -->
  <!-- are also discarded.                                              -->
  <!--                                                                  -->
  <!-- If the specified header was present several times in the         -->
  <!-- message, all occurences are concatenated (CRLF seperated)        -->
  <!-- to be used in place of the '[last_*]' keyword.                   -->

  <send>
    <![CDATA[

      SIP/2.0 100 Trying
      [last_Via:]
      [last_From:]
      [last_To:]
      [last_Call-ID:]
      [last_CSeq:]
      [last_Record-Route:]
      Content-Length: 0

    ]]>
  </send>

  <send>
    <![CDATA[

      SIP/2.0 183 Session Progress
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid][call_number]
      [last_Call-ID:]
      [last_CSeq:]
      [last_Record-Route:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Require: 100rel
      RSeq: 100
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[media_ip_type] [media_ip]
      t=0 0
      m=audio [media_port] RTP/AVP 8 96
      a=rtpmap:8 PCMA/8000
      a=sendrecv
      a=rtpmap:96 telephone-event/8000
      a=fmtp:96 0-15

    ]]>
  </send>

  <!-- use assignstr to save the last_via to variable 3                 -->
  <!-- use regexp to extract host and port from next_url                -->
  <!-- remember to assign variable dummy to any value to avoid error    -->

  <nop>
    <action>
       <assignstr assign_to="3" value="[last_via]"/>
       <assignstr assign_to="url" value="[next_url]"/>
       <ereg regexp="sip:.*@([0-9A-Za-z\.]+):([0-9]+)" search_in="var" check_it="true" assign_to="dummy,host,port" variable="url"/>
       <assign assign_to="dummy" variable="url"/>
    </action>
  </nop>

  <recv request="PRACK", rrs="true">
  </recv>

  <nop>
    <action>
       <setdest host="[$host]" port="[$port]" protocol="UDP"/>
    </action>
  </nop>

  <send>
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:]
      [last_Call-ID:]
      [last_CSeq:]
      [last_Record-Route:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Type: application/sdp
      Content-Length: 0

    ]]>
  </send>

  <nop>
    <action>
       <exec play_pcap_audio="../pcap/g711a.pcap"/>
    </action>
  </nop>

  <recv request="CANCEL", rrs="true">
  </recv>

  <nop>
    <action>
       <setdest host="[$viahost]" port="[$viaport]" protocol="UDP"/>
    </action>
  </nop>

  <send>
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:]
      [last_Call-ID:]
      [last_CSeq:]
      [last_Record-Route:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Type: application/sdp
      Content-Length: 0

    ]]>
  </send>

  <!-- This delay can be customized by the -d command-line option       -->
  <!-- or by adding a 'milliseconds = "value"' option here.             -->
  <pause milliseconds="1000"/>

  <send>
    <![CDATA[

      SIP/2.0 487 Transaction Terminated
      [$3]
      [last_From:]
      [last_to:];tag=[pid][call_number]
      [last_Call-ID:]
      CSeq:[$2]
      [last_Record-Route:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Length: 0

    ]]>
  </send>

  <recv request="ACK">
  </recv>

  <!-- Keep the call open for a while in case the 200 is lost to be     -->
  <!-- able to retransmit it if we receive the BYE again.               --> <pause milliseconds="4000"/> 

  <!-- definition of the response time repartition table (unit is ms)   -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

  <!-- definition of the call length repartition table (unit is ms)     -->
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>

</scenario>

